const express = require('express');
const jwt = require('jsonwebtoken');
const router = express.Router();

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ refresh token
const simpleAuth = (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      return res.status(401).json({ message: 'Access token required' });
    }

    const decoded = jwt.verify(token, process.env.JWT_ACCESS_SECRET);
    req.userId = decoded.userId;
    next();
  } catch (error) {
    console.error('Simple auth error:', error.message);
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ message: 'Token expired' });
    }
    return res.status(403).json({ message: 'Invalid token' });
  }
};

// AI chat endpoint
router.post('/chat', simpleAuth, async (req, res) => {
  try {
    const { messages } = req.body;
    
    if (!messages || !Array.isArray(messages)) {
      return res.status(400).json({ 
        error: 'Messages array is required' 
      });
    }

    console.log('ü§ñ AI Chat request:', {
      userId: req.userId,
      messageCount: messages.length,
      lastMessage: messages[messages.length - 1]?.content?.substring(0, 50) + '...',
      timestamp: new Date().toISOString(),
      authSuccess: true
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!process.env.OPENROUTER_API_KEY) {
      console.log('‚ùå OPENROUTER_API_KEY not configured');
      return res.status(500).json({ 
        error: 'AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        isError: true
      });
    }

    console.log('ü§ñ Calling OpenRouter API with model:', process.env.OPENROUTER_MODEL);

    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': process.env.CLIENT_URL || 'https://tuktuk-five.vercel.app',
        'X-Title': 'Tuktuk AI Chat'
      },
      body: JSON.stringify({
        model: process.env.OPENROUTER_MODEL || 'google/gemini-flash-1.5',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.'
          },
          ...messages.map(msg => ({
            role: msg.type === 'user' ? 'user' : 'assistant',
            content: msg.content
          }))
        ],
        max_tokens: 1000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå OpenRouter API error:', response.status, errorText);
      
      let errorMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      
      if (response.status === 429) {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI —Å–µ—Ä–≤–∏—Å—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      } else if (response.status === 401) {
        errorMessage = 'AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        console.log('‚ùå OpenRouter API key issue - check configuration');
      } else if (response.status === 400) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI —Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.';
      } else if (response.status === 500) {
        errorMessage = '–û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (response.status === 403) {
        errorMessage = 'AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      }
      
      return res.status(200).json({ 
        error: errorMessage,
        isError: true
      });
    }

    const data = await response.json();
    
    res.json({
      content: data.choices[0].message.content,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå AI chat error:', error);
    
    // Fallback –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    const fallbackResponse = getFallbackResponse(messages[messages.length - 1]?.content);
    
    res.json({
      content: fallbackResponse,
      timestamp: new Date().toISOString(),
      isFallback: true
    });
  }
});

// –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ fallback
function getFallbackResponse(userMessage) {
  const message = userMessage?.toLowerCase() || '';
  
  if (message.includes('–ø—Ä–∏–≤–µ—Ç') || message.includes('hello')) {
    return '–ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Å–Ω–æ–≤–Ω–æ–π AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –±–∞–∑–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.';
  }
  
  if (message.includes('–∫–∞–∫ –¥–µ–ª–∞') || message.includes('–∫–∞–∫ —Ç—ã')) {
    return '–£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º, —Ö–æ—Ç—è –æ—Å–Ω–æ–≤–Ω–æ–π AI —Å–µ—Ä–≤–∏—Å —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
  }
  
  if (message.includes('—Å–ø–∞—Å–∏–±–æ')) {
    return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å!';
  }
  
  if (message.includes('–ø–æ–º–æ—â—å') || message.includes('help')) {
    return '–Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.';
  }
  
  return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Å–Ω–æ–≤–Ω–æ–π AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
}

module.exports = router;
