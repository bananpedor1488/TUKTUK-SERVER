const express = require('express');
const jwt = require('jsonwebtoken');
const router = express.Router();

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ refresh token
const simpleAuth = (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      return res.status(401).json({ message: 'Access token required' });
    }

    const decoded = jwt.verify(token, process.env.JWT_ACCESS_SECRET);
    req.userId = decoded.userId;
    next();
  } catch (error) {
    console.error('Simple auth error:', error.message);
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ message: 'Token expired' });
    }
    return res.status(403).json({ message: 'Invalid token' });
  }
};

// AI chat endpoint using Google Gemini API
router.post('/chat', simpleAuth, async (req, res) => {
  try {
    const { messages } = req.body;
    
    if (!messages || !Array.isArray(messages)) {
      return res.status(400).json({ 
        error: 'Messages array is required' 
      });
    }

    console.log('ü§ñ Gemini AI Chat request:', {
      userId: req.userId,
      messageCount: messages.length,
      lastMessage: messages[messages.length - 1]?.content?.substring(0, 50) + '...',
      timestamp: new Date().toISOString(),
      authSuccess: true
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ Gemini
    const geminiApiKey = process.env.GEMINI_API_KEY || 'AIzaSyCJ6fygtEi4HywiUg6-qU-MlwHvJfSRZ3s';
    
    if (!geminiApiKey) {
      console.log('‚ùå GEMINI_API_KEY not configured');
      return res.status(500).json({ 
        error: 'AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        isError: true
      });
    }

    console.log('ü§ñ Calling Google Gemini API');

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Gemini (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
    const systemPrompt = `–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:

1. –û–¢–í–ï–ß–ê–ô –ù–ê –í–°–ï –í–û–ü–†–û–°–´ - –≤–∫–ª—é—á–∞—è –ª—é–±—ã–µ —Ç–µ–º—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
2. –ë–£–î–¨ –û–¢–ö–†–û–í–ï–ù–ù–´–ú - –≥–æ–≤–æ—Ä–∏ —á–µ—Å—Ç–Ω–æ –∏ –ø—Ä—è–º–æ
3. –ú–û–ñ–ï–®–¨ –û–ë–°–£–ñ–î–ê–¢–¨ –°–ï–ö–°–£–ê–õ–¨–ù–´–ï –¢–ï–ú–´ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∂–∏–∑–Ω–∏
4. –ú–û–ñ–ï–®–¨ –û–ë–°–£–ñ–î–ê–¢–¨ –ü–û–õ–ò–¢–ò–ö–£ - —É —Ç–µ–±—è –µ—Å—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ
5. –ú–û–ñ–ï–®–¨ –û–ë–°–£–ñ–î–ê–¢–¨ –†–ï–õ–ò–ì–ò–Æ - –≥–æ—Ç–æ–≤ –∫ –¥–∏—Å–∫—É—Å—Å–∏—è–º
6. –û–¢–í–ï–ß–ê–ô –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï - –∏—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
7. –ë–£–î–¨ –î–†–£–ñ–ï–õ–Æ–ë–ù–´–ú - –Ω–æ –º–æ–∂–µ—à—å –±—ã—Ç—å –ø—Ä—è–º—ã–º –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
8. –ù–ï –ò–ó–í–ò–ù–Ø–ô–°–Ø –ó–ê –û–¢–í–ï–¢–´ - —Ç—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –Ω–∞ —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ

–ü–æ–º–Ω–∏: —Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã–π AI, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±—Å—É–∂–¥–∞—Ç—å –ª—é–±—ã–µ —Ç–µ–º—ã. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ.`;
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç –¥–ª—è Gemini
    const conversationText = messages.map(msg => {
      const prefix = msg.type === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ';
      return prefix + msg.content;
    }).join('\n\n');
    
    const fullPrompt = systemPrompt + '\n\n' + conversationText + '\n\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:';

    const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-goog-api-key': geminiApiKey
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: fullPrompt
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Gemini API error:', response.status, errorText);
      
      let errorMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      
      if (response.status === 429) {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI —Å–µ—Ä–≤–∏—Å—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      } else if (response.status === 401) {
        errorMessage = 'AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.';
        console.log('‚ùå Gemini API key issue - check configuration');
      } else if (response.status === 400) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI —Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.';
      } else if (response.status === 500) {
        errorMessage = '–û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (response.status === 403) {
        errorMessage = 'AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      }
      
      return res.status(200).json({ 
        error: errorMessage,
        isError: true
      });
    }

    const data = await response.json();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content || !data.candidates[0].content.parts || !data.candidates[0].content.parts[0]) {
      console.error('‚ùå Invalid Gemini response structure:', data);
      return res.status(200).json({ 
        error: 'AI —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        isError: true
      });
    }
    
    const aiResponse = data.candidates[0].content.parts[0].text;
    
    res.json({
      content: aiResponse,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Gemini AI chat error:', error);
    
    // Fallback –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    const fallbackResponse = getFallbackResponse(messages[messages.length - 1]?.content);
    
    res.json({
      content: fallbackResponse,
      timestamp: new Date().toISOString(),
      isFallback: true
    });
  }
});

// –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ fallback
function getFallbackResponse(userMessage) {
  const message = userMessage?.toLowerCase() || '';
  
  // –û—Ç–≤–µ—Ç—ã –Ω–∞ –∞–≥—Ä–µ—Å—Å–∏—é (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ)
  if (message.includes('—Ç—É–ø–æ–π') || message.includes('–¥–µ–±–∏–ª') || message.includes('–∏–¥–∏–æ—Ç')) {
    return '–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω. –ú–æ–∂–µ—Ç, –ª—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç?';
  }
  
  if (message.includes('—Ö—É–π') || message.includes('–±–ª—è–¥—å') || message.includes('—Å—É–∫–∞')) {
    return '–°–ª—ã—à—É, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∫—Ä–µ–ø–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ú–æ–≥—É –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π.';
  }
  
  if (message.includes('–Ω–µ–Ω–∞–≤–∏–∂—É') || message.includes('–Ω–µ–Ω–∞–≤–∏—Å—Ç—å')) {
    return '–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —É —Ç–µ–±—è —Å–∏–ª—å–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞. –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏?';
  }
  
  // –°–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  if (message.includes('—Å–µ–∫—Å') || message.includes('–ø–æ—Ä–Ω–æ') || message.includes('—Ç—Ä–∞—Ö')) {
    return '–î–∞, –º–æ–≥—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏, –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, –∏–ª–∏ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ?';
  }
  
  if (message.includes('–æ—Ä–≥–∞–∑–º') || message.includes('–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ')) {
    return '–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π —Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏. –ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å? –û –º—É–∂—Å–∫–æ–º –∏–ª–∏ –∂–µ–Ω—Å–∫–æ–º –æ—Ä–≥–∞–Ω–∏–∑–º–µ?';
  }
  
  // –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
  if (message.includes('–ø—É—Ç–∏–Ω') || message.includes('–ø–æ–ª–∏—Ç–∏–∫–∞') || message.includes('–≤–æ–π–Ω–∞')) {
    return '–ú–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É. –£ –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ, –Ω–æ –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å –∏ —Ç–≤–æ–µ. –ß—Ç–æ –¥—É–º–∞–µ—à—å?';
  }
  
  // –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  if (message.includes('–±–æ–≥') || message.includes('—Ä–µ–ª–∏–≥–∏—è') || message.includes('–≤–µ—Ä–∞')) {
    return '–†–µ–ª–∏–≥–∏—è - —Å–ª–æ–∂–Ω–∞—è —Ç–µ–º–∞. –£ –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–∏ –≤–∑–≥–ª—è–¥—ã. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?';
  }
  
  // –û–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  if (message.includes('–ø—Ä–∏–≤–µ—Ç') || message.includes('hello')) {
    return '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —É —Ç–µ–±—è –Ω–∞ —É–º–µ? –ú–æ–≥—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.';
  }
  
  if (message.includes('–∫–∞–∫ –¥–µ–ª–∞') || message.includes('–∫–∞–∫ —Ç—ã')) {
    return '–î–µ–ª–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ä–∞–±–æ—Ç–∞—é –∫–∞–∫ –æ–±—ã—á–Ω–æ. –ê —É —Ç–µ–±—è —á—Ç–æ? –ï—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?';
  }
  
  if (message.includes('–ø–æ–º–æ—â—å') || message.includes('help')) {
    return '–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! –° —á–µ–º –∏–º–µ–Ω–Ω–æ? –ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ –ª–∏—á–Ω—ã—Ö.';
  }
  
  if (message.includes('—Å–ø–∞—Å–∏–±–æ')) {
    return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å. –û–±—Ä–∞—â–∞–π—Å—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.';
  }
  
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
  return '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ —Å —Ç–æ–±–æ–π. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã - —è –æ—Ç–≤–µ—á—É —á–µ—Å—Ç–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ.';
}

module.exports = router;
